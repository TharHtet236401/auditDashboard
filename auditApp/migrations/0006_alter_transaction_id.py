# Generated by Django 5.1.7 on 2025-03-23 15:30

import random
import string
from django.db import migrations, models
import auditApp.models

def convert_to_hex(apps, schema_editor):
    # Get the historical version of the model
    Transaction = apps.get_model('auditApp', 'Transaction')
    TransactionHistory = apps.get_model('auditApp', 'TransactionHistory')
    
    # Create mapping of old to new IDs
    id_mapping = {}
    for transaction in Transaction.objects.all():
        while True:
            hex_id = ''.join(random.choices(string.hexdigits.upper(), k=6))
            if hex_id not in id_mapping.values():
                id_mapping[transaction.id] = hex_id
                break
    
    # Update transactions and their history
    for old_id, new_id in id_mapping.items():
        # Update history records first
        TransactionHistory.objects.filter(transaction_id=old_id).update(transaction_id=new_id)
        # Then update the transaction
        Transaction.objects.filter(id=old_id).update(id=new_id)

def reverse_convert(apps, schema_editor):
    pass  # We don't want to reverse this migration

class Migration(migrations.Migration):

    dependencies = [
        ('auditApp', '0005_transactionhistory'),
    ]

    operations = [
        migrations.AlterField(
            model_name='transaction',
            name='id',
            field=models.CharField(default=auditApp.models.get_unique_hex_id, editable=False, max_length=6, primary_key=True, serialize=False),
        ),
        migrations.RunPython(convert_to_hex, reverse_convert),
    ]
